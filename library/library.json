{
  "building_blocks": [
    {
      "tag": "line",
      "tldr": "This program uses Python's Turtle graphics to draw a simple black line on a white background.",
      "prompt": "Generate a Python Turtle program that draws a line. This program uses Python's Turtle graphics to draw a simple black line on a white background. import turtle\n\n# Setup the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Create a turtle for drawing\nline_turtle = turtle.Turtle()\nline_turtle.color(\"black\")\nline_turtle.penup()  # Lift the pen to move without drawing\nline_turtle.goto(-100, 0)  # Move to the starting point of the line\nline_turtle.pendown()  # Lower the pen to start drawing\n\n# Draw a line\nline_turtle.forward(200)  # Draw a line 200 units long\n\n# Hide the turtle and finish\nline_turtle.hideturtle()\nturtle.done()"
    },
    {
      "tag": "circle",
      "tldr": "This program uses Python's Turtle graphics to draw a circle with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a circle. This program uses Python's Turtle graphics to draw a circle with a black border on a white background. import turtle\n\n# Setup the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Create a turtle for drawing\ncircle_turtle = turtle.Turtle()\ncircle_turtle.color(\"black\")\ncircle_turtle.speed(1)  # Set the speed of the turtle\n\n# Draw a circle\nradius = 100  # Radius of the circle\ncircle_turtle.penup()\ncircle_turtle.goto(0, -radius)  # Move the turtle to the starting position\ncircle_turtle.pendown()\ncircle_turtle.circle(radius)\n\n# Hide the turtle and finish\ncircle_turtle.hideturtle()\nturtle.done()"
    },
    {
      "tag": "pentagon",
      "tldr": "This program uses Python's Turtle graphics to draw a pentagon with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a pentagon. This program uses Python's Turtle graphics to draw a pentagon with a black border on a white background. import turtle\n\ndef draw_pentagon(side_length):\n    # Set up the turtle\n    turtle.bgcolor(\"white\")\n    turtle.color(\"black\")\n    turtle.pensize(2)\n    turtle.speed(1)\n\n    # Draw a pentagon\n    for _ in range(5):\n        turtle.forward(side_length)\n        turtle.right(72)  # 360/5 = 72 degrees\n\n    # Hide the turtle and finish\n    turtle.hideturtle()\n    turtle.done()\n\n# Set the side length of the pentagon\nside_length = 100\n\n# Call the function to draw the pentagon\ndraw_pentagon(side_length)"
    },
    {
      "tag": "triangle",
      "tldr": "This program uses Python's Turtle graphics to draw an equilateral triangle with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a triangle. This program uses Python's Turtle graphics to draw an equilateral triangle with a black border on a white background. import turtle\n\n# Set up the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Create a turtle for drawing\ntriangle_turtle = turtle.Turtle()\ntriangle_turtle.color(\"black\")\ntriangle_turtle.pensize(2)\n\n# Define the side length of the triangle\nside_length = 100\n\n# Draw an equilateral triangle\nfor _ in range(3):\n    triangle_turtle.forward(side_length)\n    triangle_turtle.left(120)\n\n# Hide the turtle and finish\ntriangle_turtle.hideturtle()\nturtle.done()"
    },
    {
      "tag": "square",
      "tldr": "This program uses Python's Turtle graphics to draw a square with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a square. This program uses Python's Turtle graphics to draw a square with a black border on a white background. import turtle\n\n# Set up the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Create a turtle for drawing\ndrawer = turtle.Turtle()\ndrawer.color(\"black\")\ndrawer.pensize(2)\n\n# Function to draw a square\ndef draw_square(side_length):\n    for _ in range(4):\n        drawer.forward(side_length)\n        drawer.right(90)\n\n# Draw a square with a side length of 100 units\ndraw_square(100)\n\n# Hide the turtle and finish\ndrawer.hideturtle()\nscreen.mainloop()"
    },
    {
      "tag": "octagon",
      "tldr": "This program uses Python's Turtle graphics to draw an octagon with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a octagon. This program uses Python's Turtle graphics to draw an octagon with a black border on a white background. import turtle\n\ndef draw_octagon(side_length):\n    for _ in range(8):\n        turtle.forward(side_length)\n        turtle.left(45)\n\ndef main():\n    # Setup the screen\n    screen = turtle.Screen()\n    screen.bgcolor(\"white\")\n\n    # Setup the turtle\n    turtle.speed(1)\n    turtle.color(\"black\")\n    turtle.pensize(2)\n\n    # Draw the octagon\n    draw_octagon(100)\n\n    # Hide the turtle and finish\n    turtle.hideturtle()\n    screen.mainloop()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "tag": "semi-circle",
      "tldr": "This program uses Python's Turtle graphics to draw a semi-circle with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a semi-circle. This program uses Python's Turtle graphics to draw a semi-circle with a black border on a white background. import turtle\n\n# Setup the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Create a turtle for drawing\nsemi_circle_turtle = turtle.Turtle()\nsemi_circle_turtle.color(\"black\")\nsemi_circle_turtle.speed(1)\n\n# Function to draw a semi-circle\ndef draw_semi_circle(radius):\n    semi_circle_turtle.penup()\n    semi_circle_turtle.goto(-radius, 0)  # Start at the leftmost point of the semi-circle\n    semi_circle_turtle.pendown()\n    semi_circle_turtle.setheading(90)  # Point upwards\n    semi_circle_turtle.circle(radius, 180)  # Draw a semi-circle\n\n# Draw the semi-circle\ndraw_semi_circle(100)\n\n# Hide the turtle and finish\nsemi_circle_turtle.hideturtle()\nturtle.done()"
    },
    {
      "tag": "Spiral",
      "tldr": "The program draws a square spiral starting from the center, winding outward clockwise, and ends with a vertical line from the top-left corner.",
      "prompt": "Generate a Python Turtle program that draws: To create the described image, start by drawing a single continuous line from the center of your canvas. Begin forming a square spiral by drawing a series of connected straight lines that gradually increase in length, each turning 90 degrees clockwise from the previous line. Continue this pattern, ensuring that the spiral expands outward from the center. Once the spiral reaches the top-left corner of the canvas, extend the final line vertically downward to complete the image."
    },
    {
      "tag": "heptagon",
      "tldr": "This program uses Python's Turtle graphics to draw a heptagon with a black border on a white background.",
      "prompt": "Generate a Python Turtle program that draws a heptagon. This program uses Python's Turtle graphics to draw a heptagon with a black border on a white background. import turtle\n\n# Set up the screen\nscreen = turtle.Screen()\nscreen.bgcolor(\"white\")\n\n# Set up the turtle\nheptagon_turtle = turtle.Turtle()\nheptagon_turtle.color(\"black\")\nheptagon_turtle.pensize(2)\n\n# Number of sides for a heptagon\nsides = 7\n# Angle for each turn\nangle = 360 / sides\n# Length of each side\nside_length = 100\n\n# Draw the heptagon\nfor _ in range(sides):\n    heptagon_turtle.forward(side_length)\n    heptagon_turtle.right(angle)\n\n# Hide the turtle and finish\nheptagon_turtle.hideturtle()\nscreen.mainloop()"
    },
    {
      "tag": "turtle",
      "tldr": "The program draws a symmetrical, flower-like design with eight outward-facing arcs arranged in a circle using Python Turtle.",
      "prompt": "Generate a Python Turtle program that draws: To create the described image, follow these steps:\n\n1. Start by identifying the center point of your canvas, which will be the central space around which the arcs are arranged.\n\n2. Determine the size of the arcs you want to create. Each arc should be identical in size and shape.\n\n3. Begin by drawing the first arc. Position it so that it is facing outward from the center point. The arc should have a smooth, looping appearance.\n\n4. Rotate the next arc slightly relative to the first one, maintaining the same distance from the center point. Ensure that it also faces outward.\n\n5. Continue this process, drawing each subsequent arc with a slight rotation from the previous one, until you have a total of eight arcs arranged in a circular pattern.\n\n6. Ensure that the arcs are evenly spaced and form a symmetrical, flower-like or cloud-like design.\n\n7. Review the overall pattern to ensure symmetry and smoothness in the looping appearance of the arcs.\n\nThis process will result in a complex, symmetrical design that cannot be broken down into the specified basic geometric building blocks. import turtle\n\ndef draw_arc(t, radius, extent):\n    t.circle(radius, extent)\n\ndef draw_flower():\n    # Setup the screen\n    screen = turtle.Screen()\n    screen.bgcolor(\"white\")\n\n    # Setup the turtle\n    t = turtle.Turtle()\n    t.color(\"black\")\n    t.speed(0)  # Fastest drawing speed\n    t.width(2)  # Set the width of the pen\n\n    # Draw the flower-like pattern\n    num_arcs = 8\n    arc_radius = 100\n    arc_extent = 60\n    angle_between_arcs = 360 / num_arcs\n\n    for _ in range(num_arcs):\n        draw_arc(t, arc_radius, arc_extent)\n        t.left(angle_between_arcs)\n\n    # Hide the turtle and finish\n    t.hideturtle()\n    screen.mainloop()\n\nif __name__ == \"__main__\":\n    draw_flower()"
    }
  ]
}